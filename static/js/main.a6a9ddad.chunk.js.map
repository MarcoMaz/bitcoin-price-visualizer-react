{"version":3,"sources":["components/Endpoints.js","App.js","serviceWorker.js","index.js"],"names":["url","start","mid","end","App","twoWeeksAgo","moment","subtract","format","today","month","useState","setIsLoading","setError","bitcoin","setBitcoin","value","curr","setCurr","BASE_URL","useEffect","interval","setInterval","fetch","headers","then","res","ok","json","Error","coins","bpi","catch","error","clearInterval","id","scope","Object","keys","map","bit","i","key","slice","onChange","e","target","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yTAMeA,EANH,CACRC,MAAO,sGACPC,IAAK,UACLC,IAAK,SCwEMC,MAtEf,WACE,IAAMC,EAAcC,MAASC,SAAS,GAAI,QAAQC,OAAO,cACnDC,EAAQH,MAASE,OAAO,cACxBE,EAAQJ,MAASE,OAAO,aAHjB,EAKuBG,oBAAS,GALhC,mBAKMC,GALN,aAMeD,mBAAS,MANxB,mBAMEE,GANF,aAOmBF,mBAAS,IAP5B,mBAOLG,EAPK,KAOIC,EAPJ,OAQaJ,mBAAS,CAACK,MAAO,QAR9B,mBAQLC,EARK,KAQCC,EARD,KASPC,EAAWnB,EAAIC,MAAQgB,EAAKD,MAAQhB,EAAIE,IAAMG,EAAcL,EAAIG,IAAMM,EAuB5E,OArBAW,qBAAU,WACR,IAAMC,EAAWC,aAAY,WAC3BV,GAAa,GACbW,MAAMJ,EAAU,CAACK,QAAS,CACxB,OAAU,mBACV,8BAA+B,OAEhCC,MAAM,SAAAC,GACL,OAAQA,EAAIC,GAAOD,EAAIE,OAAS,IAAIC,MAAM,eAE3CJ,MAAK,SAAAK,GACJf,EAAWe,EAAMC,KACjBnB,GAAa,MAEdoB,OAAM,SAAAC,GACPpB,EAASoB,QAER,KACH,OAAO,kBAAMC,cAAcb,MAC1B,CAACF,EAAUF,IAGZ,yBAAKkB,GAAG,aACN,+BACE,+CAAsBzB,GACtB,+BACE,4BACE,wBAAI0B,MAAM,OAAV,OACA,wBAAIA,MAAM,OAAV,WAGJ,+BAEIC,OAAOC,KAAKxB,GAASyB,KAAK,SAACC,EAAKC,GAAN,OACxB,wBAAIC,IAAMD,GACR,4BAAMD,EAAIG,OAAO,IACjB,4BAAM7B,EAAQ0B,IACd,4BACsB,QAAfvB,EAAKD,MAAmB,oCACT,QAAfC,EAAKD,MAAoB,yCAC1B,6CAOhB,uDAEE,4BAAQA,MAAQC,EAAKD,MAAQ4B,SAAU,SAACC,GAAD,OAAO3B,EAAQ,CAACF,MAAO6B,EAAEC,OAAO9B,UACrE,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,WCxDU+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,MAAK,SAAAkC,GACjCA,EAAaC,kB","file":"static/js/main.a6a9ddad.chunk.js","sourcesContent":["const url = {\n    start: 'https://cors-anywhere.herokuapp.com/https://api.coindesk.com/v1/bpi/historical/close.json?currency=',\n    mid: '&start=',\n    end: '&end='\n}\n\nexport default url","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport moment from 'moment'\nimport url from './components/Endpoints'\n\nfunction App() {\n  const twoWeeksAgo = moment().subtract(14, 'days').format('YYYY-MM-DD')\n  const today = moment().format('YYYY-MM-DD')\n  const month = moment().format('MMMM YYYY')\n\n  const [ isLoading, setIsLoading ] = useState(false)\n  const [ error, setError ] = useState(null)\n  const [ bitcoin, setBitcoin ] = useState([])\n  const [ curr, setCurr ] = useState({value: 'USD'})\n  const BASE_URL = url.start + curr.value + url.mid + twoWeeksAgo + url.end + today\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setIsLoading(true)\n      fetch(BASE_URL, {headers: {\n        \"Accept\": \"application/json\",\n        \"Access-Control-Allow-Origin\": \"*\"\n        }})\n      .then (res => {\n        return (res.ok) ?  res.json() : new Error(\"Mistake!\")\n      })\n      .then(coins => {\n        setBitcoin(coins.bpi)\n        setIsLoading(false)\n      })\n      .catch(error => {\n      setError(error)\n      })\n    }, 1000)\n    return () => clearInterval(interval);\n  }, [BASE_URL, curr])\n  \n  return(\n    <div id='container'>\n      <table>\n        <caption>Bitcoin in { month }</caption>\n        <thead>\n          <tr>\n            <th scope=\"col\">Day</th>\n            <th scope=\"col\">Price</th>\n          </tr>\n        </thead>\n        <tbody>\n          { \n            Object.keys(bitcoin).map( (bit, i) => (\n              <tr key={ i }>\n                <td>{ bit.slice(-2) }</td>\n                <td>{ bitcoin[bit] }</td>\n                <td>\n                    { (curr.value === 'USD') ? <span> &#36;</span> : \n                      (curr.value === 'EUR') ?  <span> &#8364;</span> : \n                      <span>&#163;</span>\n                    }\n                </td>\n              </tr>))\n            }\n        </tbody>\n      </table>\n      <label>\n        Change your currency:\n        <select value={ curr.value } onChange={(e) => setCurr({value: e.target.value}) }>\n          <option value=\"USD\">USD</option>\n          <option value=\"EUR\">EUR</option>\n          <option value=\"GBP\">GBP</option>\n        </select>\n      </label>\n    </div>\n    )\n  }\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}